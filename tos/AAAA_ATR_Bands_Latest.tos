# Custom Color holder hack
plot Colors = Double.NaN;

Colors. DefineColor("upper", Color. WHITE);
Colors. DefineColor("lower", Color. WHITE);

Colors. DefineColor("near_upper", Color. CYAN);
Colors. DefineColor("near_lower", Color. CYAN);

Colors. DefineColor("mid_outer", Color. WHITE);
Colors. DefineColor("mid", Color. BLUE);
Colors. DefineColor("near_mid", Color. CYAN);

Colors. DefineColor("near_mid_cross_init", Color. RED);
Colors. DefineColor("near_mid_cross", Color. GREEN);
Colors. DefineColor("near_mid_cross_confirm", Color. BLUE);
Colors. DefineColor("near_mid_cross_done", Color. YELLOW);

Colors. DefineColor("over_sold", Color. PINK);
Colors. DefineColor("over_bot", Color. PINK);

Colors. DefineColor("turn_up", Color. CYAN);
Colors. DefineColor("turn_down", Color. CYAN);

Colors. DefineColor("rsi_rally", Color. YELLOW);
Colors. DefineColor("rsi_retreat", Color. YELLOW);

Colors. DefineColor("higher", Color. LIGHT_GREEN);
Colors. DefineColor("lower", Color. LIGHT_ORANGE);

#Colors. DefineColor("rally_confirm", Color. LIGHT_ORANGE);
#Colors. DefineColor("retreat_confirm", Color. LIGHT_ORANGE);

# HI PRIORITY INPUTS
input isScan = Double.NaN;
input num_bars_near_mid = 1;

def showBandsNearMid = yes;
def showBandsMid = yes;

input showBands = no;
def showMarks = yes;
#def showValues = no;
def showLabel = yes;
#def showOptionsLabel = no;

# common price and period
input priceX_type = { oc, close, hlc3, midbody, default vwap };

def averageType = AverageType.EXPONENTIAL;

def allowIntraDayTF = yes;
def timeFrame = AggregationPeriod.DAY;
def showOnlyToday = yes;

def curTimeFrame = GetAggregationPeriod();
def cur_period_close = Fundamental(fundamentalType = FundamentalType. VWAP, period = curTimeFrame);

def tf = if (allowIntraDayTF or curTimeFrame > timeFrame) then curTimeFrame else timeFrame;
def tf_close = Fundamental(fundamentalType = FundamentalType. VWAP, period = tf);

def is_near_tf = if (curTimeFrame < timeFrame) then (cur_period_close == tf_close) else yes;

def highs = high(period = tf);
def lows = low(period = tf);
def opens = open(period = tf);
def closes = close(period = tf);
def hlc3s = hlc3(period = tf);
def vwaps = vwap(period = tf);

def priceXup;
def priceXdown;

switch (priceX_type) {
case oc:
    priceXup = Min(opens, closes);
    priceXdown = Max(opens, closes);
case close:
    priceXup = closes;
    priceXdown = closes;
case hlc3:
    priceXup = hlc3s;
    priceXdown = hlc3s;
case midbody:
    priceXup = (opens + closes) / 2;
    priceXdown = (opens + closes) / 2;
case vwap:
    priceXup = vwaps;
    priceXdown = vwaps;
}

##############
## RSI ##
##############
def num_bars_rsi_cross = 1;
def rsi_over_sold = 30;
def rsi_over_bot = 70;
def rsi_price = vwaps;

def rsi_length = 14;
def rsi_ave_length = 9;

def NetChgAvg = MovingAverage(AverageType.EXPONENTIAL, rsi_price - rsi_price[1], rsi_length);
def TotChgAvg = MovingAverage(AverageType.EXPONENTIAL, AbsValue(rsi_price - rsi_price[1]), rsi_length);
def ChgRatio = if TotChgAvg != 0 then NetChgAvg / TotChgAvg else 0;

def RSI = 50 * (ChgRatio + 1);
def RSIAvg = Average(RSI, rsi_ave_length);

# over sold/bot
def isRSIOverSold;
def isRSIOverBot;

# rsi
if (RSI < rsi_over_sold or RSIAvg < rsi_over_sold) {
    isRSIOverSold = yes;
    isRSIOverBot = no;
}
else if (RSI > rsi_over_bot or RSIAvg > rsi_over_bot) {
    isRSIOverSold = no;
    isRSIOverBot = yes;
} else {
    isRSIOverSold = no;
    isRSIOverBot = no;
}

# crosses over sold/bot
def isRSIBreakdown;
def isRSIBreakout;

# rsi
if ((RSI crosses below rsi_over_sold or RSIAvg crosses below rsi_over_sold)) { # within num_bars_rsi_cross bars) {
    isRSIBreakdown = yes;
    isRSIBreakout = no;
}
else if ((RSI crosses above rsi_over_bot or RSIAvg crosses above rsi_over_bot)) { # within num_bars_rsi_cross bars) {
    isRSIBreakdown = no;
    isRSIBreakout = yes;
} else {
    isRSIBreakdown = no;
    isRSIBreakout = no;
}

# crosses rsi avg
def isRSIRally;
def isRSIRetreat;

# rsi
#if ((RSI < rsi_over_sold or RSIAvg < rsi_over_sold) and RSI crosses above RSIAvg within num_bars_rsi_cross bars) {
if ((RSI[2] < rsi_over_sold or RSI[1] < rsi_over_sold or RSIAvg[2] < rsi_over_sold or RSIAvg[1] < rsi_over_sold) and RSI crosses above RSIAvg) { #  within num_bars_rsi_cross bars) {
    isRSIRally = yes;
    isRSIRetreat = no;
}
#else if ((RSI > rsi_over_bot or RSIAvg > rsi_over_bot) and RSI crosses below RSIAvg within num_bars_rsi_cross bars) {
else if ((RSI[2] > rsi_over_bot or RSI[1] > rsi_over_bot or RSIAvg[2] > rsi_over_bot or RSIAvg[1] > rsi_over_bot) and RSI crosses below RSIAvg) { #  within num_bars_rsi_cross bars) {
    isRSIRally = no;
    isRSIRetreat = yes;
} else {
    isRSIRally = no;
    isRSIRetreat = no;
}

##############
## PIVOTS   ##
##############
def pvtTF = if (curTimeFrame > AggregationPeriod.WEEK) then AggregationPeriod.MONTH else if (curTimeFrame < AggregationPeriod.WEEK) then AggregationPeriod.DAY else AggregationPeriod.WEEK;

def R3;
def R2;
def R1;
def PP;
def S1;
def S2;
def S3;

if showOnlyToday and !IsNaN(close(period = pvtTF)[-1])
then {
    R1 = Double.NaN;
    R2 = Double.NaN;
    R3 = Double.NaN;
    PP = Double.NaN;
    S1 = Double.NaN;
    S2 = Double.NaN;
    S3 = Double.NaN;
} else {
    PP = (high(period = pvtTF)[1] + low(period = pvtTF)[1] + close(period = pvtTF)[1]) / 3;
    R1 = 2 * PP - low(period = pvtTF)[1];
    R2 = PP + high(period = pvtTF)[1] - low(period = pvtTF)[1];
    R3 = R2 + high(period = pvtTF)[1] - low(period = pvtTF)[1];
    S1 = 2 * PP - high(period = pvtTF)[1];
    S2 = PP - high(period = pvtTF)[1] + low(period = pvtTF)[1];
    S3 = S2 - high(period = pvtTF)[1] + low(period = pvtTF)[1];
}

##############
## ATR BAND ##
##############

input trailType = { default modified, unmodified };

input ATRPeriod = 21;
input ATRBandPeriod = 34;
input ATRBandPeriodMid = 13;
input ATRBandPeriodNear = 5;
input ATRFactorBand = 3.5;
input ATRFactorUpper = 3.18;
input ATRFactorLower = 2.36;
#input ATRFactorStopUp = 3.18;
#input ATRFactorStopDown = 2.36;
def ATRFactorVol = 1.0;
def ATREntryRetracePct = 0.382;
def ATRRetracePct = 0.618;
def AtrAverageType = AverageType.WILDERS;

def useRetracePct = yes;
def retracePct = 1.0;

def applyVolRange = yes;

Assert(ATRFactorUpper > 0, "'atr factor upper' must be positive: " + ATRFactorUpper);
Assert(ATRFactorLower > 0, "'atr factor lower' must be positive: " + ATRFactorLower);

def HiLo = Min(highs - lows, 1.5 * Average(highs - lows, ATRPeriod));
def HRef = if lows <= highs[1]
    then highs - closes[1]
    else (highs - closes[1]) - 0.5 * (lows - highs[1]);
def LRef = if highs >= lows[1]
    then closes[1] - lows
    else (closes[1] - lows) - 0.5 * (lows[1] - highs);

def trueRange;

switch (trailType) {
case modified:
    trueRange = Max(HiLo, Max(HRef, LRef));
case unmodified:
    trueRange = TrueRange(highs, closes, lows);
}

def range = MovingAverage(AtrAverageType, trueRange, ATRPeriod);

def band_width = Round(ATRFactorBand * range);
def upper = Round(ATRFactorUpper * range);
def lower = Round(ATRFactorLower * range);

def default_vol = 0.236;
def hv = HistoricalVolatility(length = 20)."HV";
def hvFactor = Min(if !IsNaN(hv) then hv else default_vol, 1.00);
def ivFactor = Min(if !IsNaN(imp_volatility(period = tf)) then imp_volatility(period = tf) else default_vol, 1.00);
def volty = ((hvFactor + (ivFactor * 4)) / 5);
def vol_range = Round(range * (if applyVolRange then volty else 0));

def state = { default init, running };
def bandUpper;
def bandLower;
def nearUpper;
def nearLower;

switch (state[1]) {
case init:
    if (!IsNaN(band_width)) {
        state = state.running;
        bandUpper =  closes + band_width;
        bandLower = closes - band_width;
        nearUpper =  bandUpper - ((ATRFactorVol * range) - vol_range);
        nearLower = bandLower + ((ATRFactorVol * range) - vol_range);
    } else {
        state = state.init;
        bandUpper = Double.NaN;
        bandLower = Double.NaN;
        nearUpper = Double.NaN;
        nearLower = Double.NaN;
    }
case running:
    state = state.running;
    bandUpper = closes + band_width;
    bandLower = closes - band_width;
    nearUpper = bandUpper - ((ATRFactorVol * range) - vol_range);
    nearLower = bandLower + ((ATRFactorVol * range) - vol_range);
}

# atr channel/bands values
def vAtrBandUpper = MovingAverage(averageType, bandUpper, ATRBandPeriod);
def vAtrBandLower = MovingAverage(averageType, bandLower, ATRBandPeriod);
def vAtrBandMidOuter = Round((vAtrBandUpper + vAtrBandLower) / 2);

def vAtrBandMid = MovingAverage(averageType, Round((bandUpper + bandLower) / 2), ATRBandPeriodMid);

def vAtrBandNearUpper = MovingAverage(averageType, Round(bandUpper - ((ATRFactorVol * range) - vol_range)), ATRBandPeriodNear);
def vAtrBandNearLower = MovingAverage(averageType, Round(bandLower + ((ATRFactorVol * range) - vol_range)), ATRBandPeriodNear);
def vAtrBandNearMid = Round((vAtrBandNearUpper + vAtrBandNearLower) / 2);

# band plots
plot AtrBandUpper = if showBands then vAtrBandUpper else Double.NaN;
plot AtrBandLower = if showBands then vAtrBandLower else Double.NaN;
plot AtrBandMidOuter = if (showBandsMid or showBands) then vAtrBandMidOuter else Double.NaN;

plot AtrBandMid = if (showBandsMid or showBands) then vAtrBandMid else Double.NaN;

plot AtrBandNearUpper = if showBands then vAtrBandNearUpper else Double.NaN;
plot AtrBandNearLower = if showBands then vAtrBandNearLower else Double.NaN;
plot AtrBandNearMid = if (showBandsMid or showBandsNearMid or showBands) then vAtrBandNearMid else Double.NaN;

AtrBandUpper. SetDefaultColor(Colors. Color("upper"));
AtrBandLower. SetDefaultColor(Colors. Color("lower"));

AtrBandNearUpper. SetDefaultColor(Colors. Color("near_upper"));
AtrBandNearLower. SetDefaultColor(Colors. Color("near_lower"));

AtrBandMidOuter. SetDefaultColor(Colors. Color("mid_outer"));
AtrBandMid. SetDefaultColor(Colors. Color("mid"));
AtrBandNearMid. SetDefaultColor(Colors. Color("near_mid"));

# marks display
# init
def priceXupInit = closes;
def priceXdownInit = closes;

# target
# priceXup => priceX_type
# priceXdown => priceX_type

# confirm
def priceXupConfirm = Min(opens, closes);
def priceXdownConfirm = Max(opens, closes);

# done
def priceXupDone = Min(highs, lows);
def priceXdownDone = Max(highs, lows);

def atrXval = range + vol_range;
#def atrXval = range;

def vOverSold = no
                or ((isRSIOverSold or isRSIBreakdown or vAtrBandMid < vAtrBandMidOuter) and ((vAtrBandNearMid - lows >= atrXval) crosses above 0 within num_bars_near_mid bars))
                or ((vAtrBandMidOuter < vAtrBandMid) and ((vAtrBandNearMid - lows >= atrXval) crosses above 0 within num_bars_near_mid bars))
;

def vOverBot = no
                or ((isRSIOverBot or isRSIBreakout or vAtrBandMid > vAtrBandMidOuter) and ((highs - vAtrBandNearMid >= atrXval) crosses above 0  within num_bars_near_mid bars))
                or ((vAtrBandMidOuter > vAtrBandMid) and ((highs - vAtrBandNearMid >= atrXval) crosses above 0 within num_bars_near_mid bars))
;

plot OverSold = vOverSold;
plot OverBot = vOverBot;

OverSold. SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);
OverSold. SetDefaultColor(Colors. Color("over_sold"));
OverSold. SetLineWeight(1);
OverSold. SetHiding(!showMarks);

OverBot. SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);
OverBot. SetDefaultColor(Colors. Color("over_bot"));
OverBot. SetLineWeight(1);
OverBot. SetHiding(!showMarks);

def vSuperSold = no
                or (vOverSold or ((isRSIOverSold or isRSIBreakdown or vAtrBandMid < vAtrBandMidOuter) and (vAtrBandNearMid - priceXdown >= vol_range))) and priceXdown < priceXdown[1]
;

def vSuperBot = no
                or (vOverBot or ((isRSIOverBot or isRSIBreakout or vAtrBandMid > vAtrBandMidOuter) and (priceXup - vAtrBandNearMid >= vol_range))) and priceXup > priceXup[1]
;


#plot OverTurnUp = vSuperSold[1] and ((priceXdown > priceXdown[1] or isRSIRally) crosses above 0 within num_bars_near_mid bars);
#plot OverTurnDown = vSuperBot[1] and ((priceXup < priceXup[1] or isRSIRetreat) crosses above 0 within num_bars_near_mid bars);
plot OverTurnUp = vSuperSold[1] and ((priceXdown > priceXdown[1]) crosses above 0 within num_bars_near_mid bars);
plot OverTurnDown = vSuperBot[1] and ((priceXup < priceXup[1]) crosses above 0 within num_bars_near_mid bars);

OverTurnUp. SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);
OverTurnUp. SetDefaultColor(Colors. Color("turn_up"));
OverTurnUp. SetLineWeight(1);
OverTurnUp. SetHiding(!showMarks);

OverTurnDown. SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);
OverTurnDown. SetDefaultColor(Colors. Color("turn_down"));
OverTurnDown. SetLineWeight(1);
OverTurnDown. SetHiding(!showMarks);

# atr breakout/down
#def areMidsFalling = (vAtrBandMidOuter > vAtrBandMid and vAtrBandMid > vAtrBandNearMid and vAtrBandNearMid > priceXdown);
#def areMidsRising = (vAtrBandMidOuter < vAtrBandMid and vAtrBandMid < vAtrBandNearMid and vAtrBandNearMid < priceXup);

#def hi_mid = Highest(vwaps, ATRBandPeriodMid);
#def hi_delta = Round(hi_mid - lows);
#def hi_delta_pct = if hi_delta > 0 then Round(hi_delta / hi_mid) else Double.NaN;
#def xatr_down = if hi_delta > 0 then Round(hi_delta / range) else Double.NaN;

#def lo_mid = Lowest(vwaps, ATRBandPeriodMid);
#def lo_delta = Round(highs - lo_mid);
#def lo_delta_pct = if lo_delta > 0 then Round(lo_delta / lo_mid) else Double.NaN;
#def xatr_up = if lo_delta > 0 then Round(lo_delta / range) else Double.NaN;

#plot AtrBreakdown = areMidsFalling and (xatr_down > ATRFactorBand) crosses above 0 within num_bars_near_mid bars;
#plot AtrBreakout = areMidsRising and (xatr_up > ATRFactorBand) crosses above 0 within num_bars_near_mid bars;

#AtrBreakdown. SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);
#AtrBreakdown. SetDefaultColor(Colors. Color("atr_breakdown"));
#AtrBreakdown. SetLineWeight(1);
#AtrBreakdown. SetHiding(!showMarks);

#AtrBreakout. SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);
#AtrBreakout. SetDefaultColor(Colors. Color("atr_breakdown"));
#AtrBreakout. SetLineWeight(1);
#AtrBreakout. SetHiding(!showMarks);

# retreat rally price
#def rally_price = Max(Round((priceXdownConfirm + priceXdownDone) / 2), priceXdownDone - vol_range);
#def retreat_price = Min(Round((priceXupConfirm + priceXupDone) / 2), priceXupDone + vol_range);
def rally_price = priceXup;
def retreat_price = priceXdown;

# rsi atr rally / retreat
plot RSIMidRally = (isRSIRally and rally_price crosses above vAtrBandNearMid within num_bars_near_mid bars) and no;

plot RSIMidRetreat = (isRSIRetreat and retreat_price crosses below vAtrBandNearMid within num_bars_near_mid bars) and no;

RSIMidRally. SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);
RSIMidRally. SetDefaultColor(Colors. Color("rsi_rally"));
RSIMidRally. SetLineWeight(1);
RSIMidRally. SetHiding(!showMarks);

RSIMidRetreat. SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);
RSIMidRetreat. SetDefaultColor(Colors. Color("rsi_retreat"));
RSIMidRetreat. SetLineWeight(1);
RSIMidRetreat. SetHiding(!showMarks);

# highs and lows
def rbh1 = Highest(highs, ATRBandPeriodNear);
def rbh2 = Highest(highs, ATRBandPeriodMid);
def rbh3 = Highest(highs, ATRPeriod);

def rbl1 = Lowest(lows, ATRBandPeriodNear);
def rbl2 = Lowest(lows, ATRBandPeriodMid);
def rbl3 = Lowest(lows, ATRPeriod);

plot rb = (rbh3 > rbh1 and rbh2 == rbh1) and (rbl2 < rbl1 and rbl2 == rbl3);
rb. SetHiding(yes);

#def fb1 = Lowest(lows, ATRPeriod);
#def fb2 = Lowest(lows, ATRBandPeriodMid);
#def fb3 = Lowest(lows, ATRBandPeriodNear);

#plot HigherBars = rb[1] and rbh1 crosses above rbh3 within 3 bars;
plot HigherBars = rb[1];
#plot HigherBars = (rb1 < rb2 and rb1 < rb3) and (rb2 > rb3 and rb3 < rb4) and Crosses(rb4 >= rb3, 0, CrossingDirection. ABOVE);
#plot LowerBars = (fb1 > fb2 and fb1 > fb3) and (fb2 < fb3 and fb3 > fb4) and Crosses(fb4 <= fb3, 0, CrossingDirection. ABOVE);

HigherBars. SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);
HigherBars. SetDefaultColor(Colors. Color("higher"));
HigherBars. SetLineWeight(5);
HigherBars. SetHiding(!showMarks);

#LowerBars. SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);
#LowerBars. SetDefaultColor(Colors. Color("lower"));
#LowerBars. SetLineWeight(5);
#LowerBars. SetHiding(!showMarks);

#AddLabel(showLabel, ""
#    + "rbs: ["
#    + rb1 + ", "
#    + rb2 + ", "
#    + rb3 + ", "
#    + rb4 + ", "
#    + "]"
#    + "",
#    Color. RED);
#
#AddLabel(showLabel, ""
#    + "fbs: ["
#    + fb1 + ", "
#    + fb2 + ", "
#    + fb3 + ", "
#    + fb4 + ", "
#    + "]"
#    + "",
#    Color. RED);

# value displays
def curEntryPrice = closes;
def curEntryProfitPrice = Round(curEntryPrice + upper);
def curEntryStopPrice = Round(curEntryPrice - lower);
def curpvtEntryProfitPrice =
    if curEntryProfitPrice > R1 then
        if curEntryProfitPrice > R2 then
            if curEntryProfitPrice > R3 then curEntryProfitPrice else Round((curEntryProfitPrice + R3) / 2)
        else Round((curEntryProfitPrice + R2) / 2)
    else Round((curEntryProfitPrice + R1) / 2);
def curpvtEntryStopPrice =
    if curEntryStopPrice < S1 then
        if curEntryStopPrice < S2 then
            if curEntryStopPrice < S3 then curEntryStopPrice else Round((curEntryStopPrice + S3) / 2)
        else Round((curEntryStopPrice + S2) / 2)
    else Round((curEntryStopPrice + S1) / 2);

def longEntryPrice = Round(closes - ((if useRetracePct then retracePct else ATRRetracePct) * range));
def longEntryProfitPrice = Round(longEntryPrice + upper);
def longEntryStopPrice = Round(longEntryPrice - lower);
def longpvtEntryPrice = if longEntryPrice > PP then Round((longEntryPrice + PP) / 2) else longEntryPrice;
#def longpvtEntryPrice = longEntryPrice;
def longpvtEntryProfitPrice =
    if longEntryProfitPrice > R1 then
        if longEntryProfitPrice > R2 then
            if longEntryProfitPrice > R3 then longEntryProfitPrice else Round((longEntryProfitPrice + R3) / 2)
        else Round((longEntryProfitPrice + R2) / 2)
    else Round((longEntryProfitPrice + R1) / 2);
def longpvtEntryStopPrice =
    if longEntryStopPrice < S1 then
        if longEntryStopPrice < S2 then
            if longEntryStopPrice < S3 then longEntryStopPrice else Round((longEntryStopPrice + S3) / 2)
        else Round((longEntryStopPrice + S2) / 2)
    else Round((longEntryStopPrice + S1) / 2);

def shortEntryPrice = Round(closes + ((if useRetracePct then retracePct else ATRRetracePct) * range));
def shortEntryProfitPrice = Round(shortEntryPrice - upper);
def shortEntryStopPrice = Round(shortEntryPrice + lower);
def shortpvtEntryPrice = if shortEntryPrice < PP then Round((shortEntryPrice + PP) / 2) else shortEntryPrice;
#def shortpvtEntryPrice = shortEntryPrice;
def shortpvtEntryProfitPrice =
    if shortEntryProfitPrice < S1 then
        if shortEntryProfitPrice < S2 then
            if shortEntryProfitPrice < S3 then shortEntryProfitPrice else Round((shortEntryProfitPrice + S3) / 2)
        else Round((shortEntryProfitPrice + S2) / 2)
    else Round((shortEntryProfitPrice + S1) / 2);
def shortpvtEntryStopPrice =
    if shortEntryStopPrice > R1 then
        if shortEntryStopPrice > R2 then
            if shortEntryStopPrice > R3 then shortEntryStopPrice else Round((shortEntryStopPrice + R3) / 2)
        else Round((shortEntryStopPrice + R2) / 2)
    else Round((shortEntryStopPrice + R1) / 2);

plot ValueBandsUpper;
plot ValueBandsLower;

plot EntryUpper;
plot EntryLower;

plot LongEntry;
plot LongEntryUpper;
plot LongEntryLower;

if showOnlyToday and !IsNaN(closes[-1])
then {
    ValueBandsUpper = Double.NaN;
    ValueBandsLower = Double.NaN;
    EntryUpper = Double.NaN;
    EntryLower = Double.NaN;
    LongEntry = Double.NaN;
    LongEntryUpper = Double.NaN;
    LongEntryLower = Double.NaN;
}
else {
    if !IsNaN(closes[-1])
    then {
        ValueBandsUpper = Double.NaN;
        ValueBandsLower = Double.NaN;
        EntryUpper = Double.NaN;
        EntryLower = Double.NaN;
        LongEntry = Double.NaN;
        LongEntryUpper = Double.NaN;
        LongEntryLower = Double.NaN;
    }
    else {
        ValueBandsUpper = if is_near_tf then Round(closes + band_width) else Double.NaN;
        ValueBandsLower = if is_near_tf then Round(closes - band_width) else Double.NaN;
        EntryUpper = curpvtEntryProfitPrice;
        EntryLower = curpvtEntryStopPrice;
        LongEntry = longpvtEntryPrice;
        LongEntryUpper = longpvtEntryProfitPrice;
        LongEntryLower = longpvtEntryStopPrice;
    }
}

ValueBandsUpper. SetPaintingStrategy(PaintingStrategy. HORIZONTAL);
ValueBandsLower. SetPaintingStrategy(PaintingStrategy. HORIZONTAL);

ValueBandsUpper. SetHiding(!showMarks);
ValueBandsLower. SetHiding(!showMarks);

ValueBandsUpper. SetDefaultColor(Color. LIGHT_GRAY);
ValueBandsLower. SetDefaultColor(Color. LIGHT_GRAY);

EntryUpper. SetPaintingStrategy(PaintingStrategy. HORIZONTAL);
EntryLower. SetPaintingStrategy(PaintingStrategy. HORIZONTAL);

LongEntry. SetPaintingStrategy(PaintingStrategy. HORIZONTAL);
LongEntryUpper. SetPaintingStrategy(PaintingStrategy. HORIZONTAL);
LongEntryLower. SetPaintingStrategy(PaintingStrategy. HORIZONTAL);

EntryUpper. SetHiding(!showMarks);
EntryLower. SetHiding(!showMarks);

LongEntry. SetHiding(!showMarks);
LongEntryUpper. SetHiding(!showMarks);
LongEntryLower. SetHiding(!showMarks);

EntryUpper. SetDefaultColor(Color. GREEN);
EntryLower. SetDefaultColor(Color. RED);

LongEntry. SetDefaultColor(Color. LIGHT_GRAY);
LongEntryUpper. SetDefaultColor(Color. LIGHT_GREEN);
LongEntryLower. SetDefaultColor(Color. LIGHT_RED);

AddLabel(showLabel, ""
        + "atr: " + Round(range) + ", "
        + "atr%: " + Round(range / vwaps * 100) + ", "
        + "vr: " + Round(vol_range) + ", "
        + "vty: " + Round(volty) + ", "
        + "",
        Color. GRAY);

AddLabel(showLabel, ""
        + "hi: " + Round(bandUpper) + ", "
        + "lo: " + Round(bandLower) + ", "
        + "bw: " + Round(band_width) + ", "
        + "bw%: " + Round(band_width / vwaps * 100),
        Color.LIGHT_GRAY);

input pot = 150000;
input exposure_pct = 1.00;
input risk_tol_pct = 5.00;
def exp_shares = Floor((pot * (exposure_pct / 100)) / (Round(curEntryPrice)));
def risk_tolerance = Round((pot * (exposure_pct / 100)) * (risk_tol_pct / 100), 0);
def risk_shares_x = Floor(risk_tolerance / (Round(curEntryPrice) - Round(curEntryPrice - lower)));
def risk_shares_l = Floor(risk_tolerance / (Round(longEntryPrice) - Round(longEntryPrice - lower)));
def risk_shares_s = Floor(risk_tolerance / (Round(shortEntryPrice + lower) - Round(shortEntryPrice)));

AddLabel(showLabel, ""
        + "N: " + exp_shares + ", "
        + "R: " + risk_tolerance + ", "
        + "X: " + risk_shares_x + "@[" + Round(curEntryPrice + upper) + ", " + Round(curEntryPrice) + ", " + Round(curEntryPrice - lower) + "], "
        + "L: " + risk_shares_l + "@[" + Round(longEntryPrice + upper) + ", " + Round(longEntryPrice) + ", " + Round(longEntryPrice - lower) + "], "
#        + "S: " + risk_shares_s + "@[" + Round(shortEntryPrice - upper) + ", " + Round(shortEntryPrice) + ", " + Round(shortEntryPrice + lower) + "]"
        + "",
        Color.PINK);

#AddLabel(showLabel and areMidsFalling, ""
#    + "L@" + ATRBandPeriodMid + "["
#    + "$" + hi_delta + ", "
#    + Round(hi_delta_pct * 100) + "%, "
#    + xatr_down + "x]"
#    + "",
#    Color. RED);

#AddLabel(showLabel and areMidsRising, ""
#    + "P@" + ATRBandPeriodMid + "["
#    + "$" + lo_delta + ", "
#    + Round(lo_delta_pct * 100) + "%, "
#    + xatr_up + "x]"
#    + "",
#    Color. GREEN);

# scans
#plot ScanRising = if IsScan then (TurnUp or TurnUpConfirm) else Double.NaN;
#plot ScanFalling = if IsScan then (TurnDown or TurnDownConfirm) else Double.NaN;